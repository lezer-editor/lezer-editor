import { resolve } from "path";
//var LodashModuleReplacementPlugin = require('lodash-webpack-plugin');
//const MonacoWebpackPlugin = require('monaco-editor-webpack-plugin');
const path = require('path');

export default {
    /**
     * Function that mutates the original webpack config.
     * Supports asynchronous changes when a promise is returned (or it's an async function).
     *
     * @param {object} config - original webpack config.
     * @param {object} env - options passed to the CLI.
     * @param {WebpackConfigHelpers} helpers - object with useful helpers for working with the webpack config.
     * @param {object} options - this is mainly relevant for plugins (will always be empty in the config), default to an empty object
     **/
    webpack(config, env, helpers, options) {
        // config.module.rules[4].use.splice(1, 0, {
        //     loader: "@teamsupercell/typings-for-css-modules-loader",
        //     options: {
        //         banner: "// This file is automatically generated from your CSS. Any edits will be overwritten.",
        //         disableLocalsExport: true
        //     }
        // });

        // config.module.rules.push({

        // });
        // config.plugins.push(new LodashModuleReplacementPlugin());

        //config.resolve.alias['monaco-editor'] = 'monaco-editor/esm/vs/editor/editor.api.js';
        // config.plugins.push(new MonacoWebpackPlugin({
        //     languages: ['javascript'],
        //     features: ['!accessibilityHelp', '!anchorSelect', '!bracketMatching', '!caretOperations', '!clipboard', '!codeAction', '!codelens', '!colorDetector', '!comment',
        //         '!contextmenu', '!coreCommands', '!cursorUndo', '!dnd', '!find', '!folding', '!fontZoom', '!format', '!gotoError', '!gotoLine', '!gotoSymbol',
        //         '!hover', '!iPadShowKeyboard', '!inPlaceReplace', '!indentation', '!inspectTokens', '!linesOperations', '!links', '!multicursor',
        //         '!onTypeRename', '!parameterHints', '!quickCommand', '!quickHelp', '!quickOutline', '!referenceSearch', '!rename', '!smartSelect',
        //         '!snippets', '!suggest', '!toggleHighContrast', '!toggleTabFocusMode', '!transpose', '!unusualLineTerminators', '!viewportSemanticTokens',
        //         '!wordHighlighter', '!wordOperations', '!wordPartOperations'
        //     ]
        // }));

        // config.entry = {...config.entry,
        //     "editor.worker": 'monaco-editor/esm/vs/editor/editor.worker.js',
        //     //"ts.worker": 'monaco-editor/esm/vs/language/typescript/ts.worker',
        // }

        // config.output = {
        //     ...config.output,
        //     globalObject: 'self',
        //     filename: '[name].bundle.js',
        //     // path: path.resolve(__dirname, 'dist')
        // }

        // Use any `index` file, not just index.js
        config.resolve.alias["preact-cli-entrypoint"] = resolve(
            process.cwd(),
            "src",
            "index"
        );

    }
};